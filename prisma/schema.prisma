generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String
  phone            String?
  password         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  avatar           String?
  bio              String?
  location         String?
  role             UserRole       @default(USER)
  isActive         Boolean        @default(true)
  lastLogin        DateTime?
  loginAttempts    Int            @default(0)
  lockedUntil      DateTime?
  resetToken       String?
  resetTokenExpiry DateTime?
  totalDonated     Float          @default(0)
  itemsDonated     Int            @default(0)
  memberSince      DateTime       @default(now())
  comments         Comment[]
  donations        Donation[]
  events           Event[]
  itemDonations    ItemDonation[]
  likes            Like[]

  @@map("app_users")
}

model Donation {
  id            String         @id @default(cuid())
  userId        String
  amount        Float
  type          DonationType
  status        DonationStatus @default(PENDING)
  paymentMethod PaymentMethod?
  transactionId String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_donations")
}

model ItemDonation {
  id               String             @id @default(cuid())
  userId           String
  itemDescription  String
  itemCondition    ItemCondition
  estimatedValue   Float?
  pickupPreference PickupPreference
  additionalNotes  String?
  status           ItemDonationStatus @default(PENDING)
  images           String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_item_donations")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String?
  date        DateTime
  type        EventType
  location    String?
  isActive    Boolean   @default(true)
  authorId    String
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@map("app_events")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("app_likes")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("app_newsletters")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum DonationType {
  MONETARY
  ITEM
}

enum DonationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  PAYPAL
  E_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

enum ItemCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum PickupPreference {
  PICKUP_NEEDED
  CAN_DROP_OFF
  EITHER_OPTION
}

enum ItemDonationStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
  PICKED_UP
  SOLD
}

enum EventType {
  NEWS
  EVENT
  ANNOUNCEMENT
}
