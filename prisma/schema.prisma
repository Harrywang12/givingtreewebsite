// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  avatar    String?
  bio       String?
  location  String?
  
  // Admin and security
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  loginAttempts Int   @default(0)
  lockedUntil   DateTime?
  
  // Password reset
  resetToken String?
  resetTokenExpiry DateTime?
  
  // Donation tracking
  totalDonated    Float   @default(0)
  itemsDonated    Int     @default(0)
  memberSince     DateTime @default(now())
  
  // Relationships
  donations       Donation[]
  itemDonations   ItemDonation[]
  comments        Comment[]
  likes           Like[]
  events          Event[]
  
  @@map("app_users")
}

model Donation {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  type        DonationType
  status      DonationStatus @default(PENDING)
  paymentMethod PaymentMethod?
  transactionId String?
  redirectUrl  String?   // URL where user was redirected to complete donation
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  confirmedAt DateTime?  // When the donation was confirmed by the user

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_donations")
}

model ItemDonation {
  id              String   @id @default(cuid())
  userId          String
  itemDescription String
  itemCondition   ItemCondition
  estimatedValue  Float?
  pickupPreference PickupPreference
  additionalNotes String?
  status          ItemDonationStatus @default(PENDING)
  images          String[] // Array of image URLs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("app_item_donations")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String?   // Full event content
  date        DateTime
  type        EventType
  location    String?
  isActive    Boolean  @default(true)
  authorId    String    // Admin who created the event
  imageUrl    String?   // Optional event image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]

  @@map("app_events")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("app_comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("app_likes")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("app_newsletters")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum DonationType {
  MONETARY
  ITEM
}

enum DonationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  PAYPAL
  E_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

enum ItemCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum PickupPreference {
  PICKUP_NEEDED
  CAN_DROP_OFF
  EITHER_OPTION
}

enum ItemDonationStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
  PICKED_UP
  SOLD
}

enum EventType {
  NEWS
  EVENT
  ANNOUNCEMENT
}

model Donor {
  id          String   @id @default(cuid())
  name        String
  isAnonymous Boolean  @default(false)
  amount      Float?   // Optional donation amount
  message     String?  // Optional thank you message
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_donors")
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float?   // Optional price
  category    String?  // e.g., "Furniture", "Electronics", "Books", etc.
  condition   String?  // e.g., "Excellent", "Good", "Fair"
  imageUrl    String?  // Item image
  isAvailable Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_inventory_items")
}
